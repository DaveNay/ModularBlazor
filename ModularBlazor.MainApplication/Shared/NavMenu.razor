@using MainApplication.Services
@using System.Reflection;
@inject ModuleManager ModuleManager

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">MainApplication</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </li>
        @if (Modules != null)
        {
            @foreach (var module in Modules)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@module.URL">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @module.NavigationLinkName
                    </NavLink>
                </li>
            }
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private IEnumerable<ModuleInfo> Modules;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        ModuleManager.OnModulesChanged += OnModulesChanged;
    }

    private async void OnModulesChanged(IEnumerable<ModuleInfo> modules)
    {
        await InvokeAsync(() =>
        {
            Modules = modules;
            StateHasChanged();
        });
    }
}
